#!/bin/bash -login
#PBS -o /mnt/research/efish/2015_genomic_data/scripts
#PBS -l nodes=1:ppn=1,walltime=04:00:00,mem=64gb
#PBS -N PLINK_fisher
#PBS -j oe
#PBS -M pitchers@msu.edu
#PBS -m abe
#PBS -r n

#dir=/mnt/scratch/pitchers/eFISH/Analysis/
dir=/mnt/ls15/scratch/groups/efish/WILL/V5-1_chunks/

cd $dir

module load plink/1.9

# mydata=`basename all_variants_merged_27_10_2015.vcf .vcf`
# mydata=all_variants_merged_21_01_2016
output_name=${input_data}_g50_CI

# Straighforward 'basic' PLINK run...
plink --bfile ${input_data} --allow-no-sex --geno 0.50 --allow-extra-chr --assoc --ci 0.95 --pfilter 1 --test-missing --real-ref-alleles --out ${input_data}_geno50

# PLINK command with:
#  `--allow-no-sex` because our fishes' weren't sexed
#  `--geno` 0.50 requires a min. 50% genotyping rate
#  `--allow-extra-chr` required because our assembly has 1000's of scaffolds
#  `--model fisher` specifies the use of the 5 models (see below) and P-vals from Fisher's exact test-missing
#  `--ci 0.95` to report 95% confidence intervals on odds ratios
#  `--pfilter 1` cuts out rows with p-vals >1 (i.e. strips 'NA's)
#  `--test-missing` Fisher's exact test for non-random missingness across cases/controls (separate output)
#  `--real-ref-alleles` "Specifies that A2 alleles are based on a real reference genome"...
plink --bfile ${input_data} --allow-no-sex --geno 0.50 --allow-extra-chr --model fisher --ci 0.95 --pfilter 1 --test-missing --real-ref-alleles --out ${output_name}


# separate out the hypothesis-wise output
hypoth=( GENO ALLELIC DOM REC TREND )
for i in ${hypoth[@]}
  do grep --color='never' ${i} ${output_name}.model >> `basename ${output_name} .model`.${i}.model
done

# reformat hypothesis-wise output for downstream user
#GENO
awk -F "[\t ]+" ' NR>1 { split( $7, tri, "/") ; split( $8, bi, "/") ; print $0 "\t" tri[1] "\t" tri[2] "\t" tri[3] "\t" bi[1] "\t" bi[2] "\t" bi[3] }' ${output_name}.GENO.model >> ${output_name}.GENO.model.reformatted
echo -e "CHR SNP A1 A2 TEST AFF UNAFF P p_Hr p_Het p_Ha np_Hr np_Het np_Ha" | cat - ${output_name}.GENO.model.reformatted | sponge ${output_name}.GENO.model.reformatted
awk '{$1=$1}1' OFS="," ${output_name}.GENO.model.reformatted > ${output_name}.GENO.model.reformatted.csv

#ALLELIC
awk -F "[\t ]+" ' NR>1 { split( $7, tri, "/") ; split( $8, bi, "/") ; print $0 "\t" tri[1] "\t" tri[2] "\t" bi[1] "\t" bi[2] }' ${output_name}.ALLELIC.model >> ${output_name}.ALLELIC.model.reformatted
echo -e "CHR SNP A1 A2 TEST AFF UNAFF P p_ref p_alt np_ref np_alt" | cat - ${output_name}.ALLELIC.model.reformatted | sponge ${output_name}.ALLELIC.model.reformatted
awk '{$1=$1}1' OFS="," ${output_name}.ALLELIC.model.reformatted > ${output_name}.ALLELIC.model.reformatted.csv

#DOM
awk -F "[\t ]+" ' NR>1 { split( $7, tri, "/") ; split( $8, bi, "/") ; print $0 "\t" tri[1] "\t" tri[2] "\t" bi[1] "\t" bi[2] }' ${output_name}.DOM.model >> ${output_name}.DOM.model.reformatted
echo -e "CHR SNP A1 A2 TEST AFF UNAFF P p_ref_or_het p_alt np_ref_or_het np_alt" | cat - ${output_name}.DOM.model.reformatted | sponge ${output_name}.DOM.model.reformatted
awk '{$1=$1}1' OFS="," ${output_name}.DOM.model.reformatted > ${output_name}.DOM.model.reformatted.csv

#REC
awk -F "[\t ]+" ' NR>1 { split( $7, tri, "/") ; split( $8, bi, "/") ; print $0 "\t" tri[1] "\t" tri[2] "\t" bi[1] "\t" bi[2] }' ${output_name}.REC.model >> ${output_name}.REC.model.reformatted
echo -e "CHR SNP A1 A2 TEST AFF UNAFF P p_ref p_het_or_alt np_ref np_het_or_alt" | cat - ${output_name}.REC.model.reformatted | sponge ${output_name}.REC.model.reformatted
awk '{$1=$1}1' OFS="," ${output_name}.REC.model.reformatted > ${output_name}.REC.model.reformatted.csv

#TREND
awk -F "[\t ]+" ' NR>1 { split( $7, tri, "/") ; split( $8, bi, "/") ; print $0 "\t" tri[1] "\t" tri[2] "\t" bi[1] "\t" bi[2] }' ${output_name}.TREND.model >> ${output_name}.TREND.model.reformatted
echo -e "CHR SNP A1 A2 TEST AFF UNAFF P p_ref p_alt np_ref np_alt" | cat - ${output_name}.TREND.model.reformatted | sponge ${output_name}.TREND.model.reformatted
awk '{$1=$1}1' OFS="," ${output_name}.TREND.model.reformatted > ${output_name}.TREND.model.reformatted.csv

rm ${output_name}*.model.reformatted

####
echo "." | mail -s "The PLINK assoc job is finishing" ${USER}@msu.edu
cd ${PBS_O_WORKDIR}
#    qsub nextjerb

#Print out the statistics for this job
qstat -f ${PBS_JOBID}
